(* This file proves properties of the handshake with pre-shared key.
It proves secrecy, authentication, and unique channel identifier
properties.
Secrecy is proved both on the client side and on the server side.
On the server side, secrecy of cs_ats_exp (this value corresponds
to the concatenation of cats, sats, ems in the paper) is proved
when the server sends the ServerFinished message, before it
receives the ClientFinished message. This property is useful for
proving security of 0.5RTT messages, by composition with the record
protocol. *)


channel io1, io1', io2, io2', io3, io4, io5, io6, io7, io8, io9, io10,
	io11, io12, io13, io14, io15, io16, io17, io18, io19, io20,
	io21, io22, io23, io24, io25, io26, io27, io28, io29, io30,
	cCorrupt.

(* If desired, the proof can be guided as follows,
   but the automatic proof strategy works.

proof {
      crypto rom(HKDF_extract_zero_salt);
      crypto prf1;
      crypto suf_cma(mac) *;
      crypto prf2 *;
      crypto client_server_hts *;
      crypto prf_fin_key_iv *;
      crypto prf3 *;
      crypto suf_cma(mac) *; 
      simplify;
      success
}
*)


type key [large, fixed].
const zero_key: key.
type extracted [large, fixed].
const zero_extracted: extracted. 

type elt [large, bounded].
fun element2key(elt): key [compos].
fun elt2bitstring(elt): bitstring [compos].

(* Gap Diffie-Hellman assumption.
   The considered groups are prime order. *)

proba pGDH.
expand GDH_prime_order(elt, key, G, exp, mult, pGDH).

letfun dh_keygen() =
   new x:key;
   (x,exp(G,x)).

param N, N', N'', N2, N3, N4.

(* HKDF_extract_zero_salt, that is, HKDF_extract with salt argument 
   0, is a random oracle. *)

type hashkey [large,fixed].

expand ROM_hash(hashkey, key, extracted, HKDF_extract_zero_salt).

param qH [noninteractive].
channel c1, c2.
let hashoracle = ! qH in(c1, x:key); out(c2, HKDF_extract_zero_salt(hk,x)). 

(* We use the lemma proved in KeySchedule1.cv *)

type two_keys [large,fixed].
const zero_two_keys: two_keys.
fun Derive_Secret_cets_eems(extracted, bitstring): two_keys.
fun Derive_Secret_psk_binder_key(extracted): key.
fun HKDF_extract_DHE(extracted, elt): extracted.
fun HKDF_extract_zero1(extracted): extracted.

proba Pprf1.

equiv prf1
       !N3 new k: extracted; (!N O1(log:bitstring) := Derive_Secret_cets_eems(k, log),
		              O2() := Derive_Secret_psk_binder_key(k),
			      !N'' O3(DHE: elt) := HKDF_extract_DHE(k, DHE),
			      O4() := HKDF_extract_zero1(k))
     <=(N3 * Pprf1(time + (N3-1)*(time(Derive_Secret_psk_binder_key) + N * time(Derive_Secret_cets_eems, maxlength(log)) + N'' * time(HKDF_extract_DHE) + time(HKDF_extract_zero1)), N, N''))=>
       !N3 (!N O1(log:bitstring) :=
	        find[unique] j<=N suchthat defined(log[j],r[j]) && log = log[j] then r[j] 
		else new r: two_keys; r,
	    O2() := new r': key; r',
	    !N'' O3(DHE: elt) :=
	        find[unique] j''<=N'' suchthat defined(DHE[j''],r''[j'']) && DHE = DHE[j''] then r''[j''] 
		else new r'': extracted; r'',
      	    O4() := new r''': extracted; r''').

fun get_client_ets(two_keys): key.
fun get_eets(two_keys): key.

equiv cets_eems
      !N new r: two_keys; (O1() := get_client_ets(r),
      	    	           O2() := get_eets(r))
    <=(0)=>
      !N (O1() := new r1: key; r1,
      	  O2() := new r2: key; r2).

(* We use the lemma proved in KeySchedule2.cv *)

fun Derive_Secret_cs_hts(extracted,bitstring):two_keys.
fun HKDF_extract_zero(extracted):extracted.


proba Pprf2.

equiv prf2
       !N3 new k: extracted; (!N O1(log:bitstring) := Derive_Secret_cs_hts(k, log),
		              O2() := HKDF_extract_zero(k))
     <=(N3 * Pprf2(time + (N3-1)*(time(HKDF_extract_zero) + N * time(Derive_Secret_cs_hts, maxlength(log))), N))=>
       !N3 (!N O1(log:bitstring) :=
	        find[unique] j<=N suchthat defined(log[j],r[j]) && log = log[j] then r[j] 
		else new r: two_keys; r,
	    O2() := new r': extracted; r').

fun get_client_hts(two_keys): key.
fun get_server_hts(two_keys): key.

equiv client_server_hts
      !N new r: two_keys; (O1() := get_client_hts(r),
      	    	           O2() := get_server_hts(r))
    <=(0)=>
      !N (O1() := new r1: key; r1,
      	  O2() := new r2: key; r2).

(* We use the lemma proved in KeySchedule3.cv *)

type three_keys [large, fixed].
fun Derive_Secret_cs_ats_exp(extracted, bitstring): three_keys.
fun Derive_Secret_rms(extracted, bitstring): key.

proba Pprf3.

equiv prf3
       !N3 new k: extracted; (!N O1(log:bitstring) := Derive_Secret_cs_ats_exp(k, log),
		              !N' O2(log': bitstring) := Derive_Secret_rms(k, log'))
     <=(N3 * Pprf2(time + (N3-1)*(N' * time(Derive_Secret_rms, maxlength(log')) + N * time(Derive_Secret_cs_ats_exp, maxlength(log))), N, N'))=>
       !N3 (!N O1(log:bitstring) :=
	        find[unique] j<=N suchthat defined(log[j],r[j]) && log = log[j] then r[j] 
		else new r: three_keys; r,
	    !N' O2(log':bitstring) :=
	        find[unique] j'<=N' suchthat defined(log'[j'],r'[j']) && log' = log'[j'] then r'[j'] 
		else new r': key; r').      

fun get_client_ats(three_keys): key.
fun get_server_ats(three_keys): key.
fun get_exporter_ms(three_keys): key.

equiv client_server_ats_exporter_ms
      !N new r: three_keys; (O1() := get_client_ats(r),
      	    	             O2() := get_server_ats(r),
			     O3() := get_exporter_ms(r))
    <=(0)=>
      !N (O1() := new r1: key; r1,
      	  O2() := new r2: key; r2,
	  O3() := new r3: key; r3).

(* We use the lemma proved in HKDFexpand.cv *)

fun HKDF_expand_fin_label(key): key.
fun HKDF_expand_key_label(key): key.
fun HKDF_expand_iv_label(key): key.

proba Pprf_fin_key_iv.

equiv prf_fin_key_iv
      !N3 new r: key; (O1() := HKDF_expand_fin_label(r),
      	      	       O2() := HKDF_expand_key_label(r),
		       O3() := HKDF_expand_iv_label(r))
    <=(N3 * Pprf_fin_key_iv(time + (N3-1)*(time(HKDF_expand_fin_label) + time(HKDF_expand_key_label) + time(HKDF_expand_iv_label))))=>
      !N3 (O1() := new r1: key; r1,
      	   O2() := new r2: key; r2,
	   O3() := new r3: key; r3).

(* SUF-CMA MAC
   The MAC is actually a combination of a hash followed by a MAC.
   It is easy to see that the combination is SUF-CMA provided the MAC is SUF-CMA 
   and the hash is collision resistant. *)

proba Pmac.
expand SUF_CMA_mac_nokgen(key, bitstring, bitstring, mac, check, Pmac).

(* Message formats *)

type nonce [large, fixed].
type certificate.

fun ClientHelloOut(nonce,bitstring): bitstring [compos].
fun ClientHelloIn(nonce,bitstring,bitstring,bitstring): bitstring [compos].
fun ServerHelloIn(nonce,bitstring): bitstring [compos].
fun ServerHelloOut(nonce): bitstring [compos].

fun ClientHelloOutDHE(nonce, elt, bitstring): bitstring [compos].
fun ClientHelloInDHE(nonce, elt, bitstring, bitstring, bitstring): bitstring [compos].
fun ServerHelloInDHE(nonce, elt, bitstring): bitstring [compos].
fun ServerHelloOutDHE(nonce, elt): bitstring [compos].

fun ServerFinishedIn(bitstring,bitstring): bitstring [compos].
fun ServerFinishedOut(bitstring): bitstring [compos].

fun ClientFinishedOut(bitstring): bitstring  [compos].
fun ClientFinishedIn(bitstring,bitstring): bitstring  [compos].

(* Logs *)

fun ClientHelloBinderLogInfo(nonce,bitstring): bitstring [compos].
fun ClientHelloBinderLogInfoDHE(nonce,elt,bitstring): bitstring [compos].
fun ClientHelloLogInfo(bitstring,bitstring,bitstring): bitstring [compos].
fun ServerHelloLogInfo(bitstring,nonce,bitstring): bitstring [compos].
fun ServerHelloLogInfoDHE(bitstring,nonce,elt,bitstring): bitstring [compos].
fun ServerBeforeFinishedLogInfo(bitstring,bitstring): bitstring [compos].
fun ServerFinishedLogInfo(bitstring,bitstring): bitstring [compos].
fun ClientBeforeFinishedLogInfo(bitstring, bitstring): bitstring [compos].
fun ClientFinishedLogInfo(bitstring, bitstring): bitstring [compos].

forall cr: nonce, l: bitstring, cr': nonce, gx: elt, l': bitstring;
       ClientHelloBinderLogInfo(cr,l) <> ClientHelloBinderLogInfoDHE(cr',gx,l').

(* Secrecy of the key *)

query secret cs_ats_exp_c public_vars cs_ats_exp_cDHE, cs_ats_exp_sDHE, resumption_secret_c, resumption_secret_s, 
      	     		  	      resumption_secret_cDHE, resumption_secret_sDHE, 
				      cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.
query secret cs_ats_exp_s public_vars cs_ats_exp_cDHE, cs_ats_exp_sDHE, resumption_secret_c, resumption_secret_s, 
      	     		  	      resumption_secret_cDHE, resumption_secret_sDHE, 
				      cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.
query secret cs_ats_exp_cDHE public_vars cs_ats_exp_c, cs_ats_exp_s, resumption_secret_c, resumption_secret_s, 
      	     		     		 resumption_secret_cDHE, resumption_secret_sDHE, 
					 cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.
query secret cs_ats_exp_sDHE public_vars cs_ats_exp_c, cs_ats_exp_s, resumption_secret_c, resumption_secret_s, 
      	     		     		 resumption_secret_cDHE, resumption_secret_sDHE, 
					 cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.

query secret resumption_secret_c public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	     			 	     resumption_secret_cDHE, resumption_secret_sDHE, 
					     cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.
query secret resumption_secret_s public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	     			 	     resumption_secret_cDHE, resumption_secret_sDHE, 
					     cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.
query secret resumption_secret_cDHE public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	     			    		resumption_secret_c, resumption_secret_s, 
						cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.
query secret resumption_secret_sDHE public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	     			    		resumption_secret_c, resumption_secret_s, 
						cets_eems_c, cets_eems_s, cets_eems_cDHE, cets_eems_sDHE.

query secret cets_eems_c public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	     		 	     resumption_secret_c, resumption_secret_s, resumption_secret_cDHE, resumption_secret_sDHE, 
				     cets_eems_cDHE, cets_eems_sDHE.
query secret1 cets_eems_s public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	      		  	      resumption_secret_c, resumption_secret_s, resumption_secret_cDHE, resumption_secret_sDHE, 
				      cets_eems_cDHE, cets_eems_sDHE.
       (* We cannot prove secrecy because of the replay attack,
          but we can prove one-session secrecy *)
query secret cets_eems_cDHE public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	     		    		resumption_secret_c, resumption_secret_s, resumption_secret_cDHE, resumption_secret_sDHE, cets_eems_c, cets_eems_s.
query secret1 cets_eems_sDHE public_vars cs_ats_exp_c, cs_ats_exp_s, cs_ats_exp_cDHE, cs_ats_exp_sDHE, 
      	      		     		 resumption_secret_c, resumption_secret_s, resumption_secret_cDHE, resumption_secret_sDHE, cets_eems_c, cets_eems_s. 
      (* We cannot prove secrecy because of the replay attack,
      	 but we can prove one-session secrecy *)

(* Authentication of the server to the client *)

event ClientTerm(nonce,bitstring,bitstring,bitstring,nonce,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys).
event ServerAccept(nonce,bitstring,bitstring,bitstring,nonce,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys).

query cr: nonce, log1: bitstring, binder: bitstring, log1': bitstring, 
      sr: nonce, log2: bitstring, log3: bitstring, m: bitstring,
      client_hk: key, server_hk: key, client_hiv: key, server_hiv: key, 
      cfk: key, sfk: key, cs_ats_exp: three_keys;
      event inj:ClientTerm(cr,log1,binder,log1',sr,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp) ==>
      	    inj:ServerAccept(cr,log1,binder,log1',sr,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp).

event ClientTermDHE(nonce,elt,bitstring,bitstring,bitstring,nonce,elt,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys).
event ServerAcceptDHE(nonce,elt,bitstring,bitstring,bitstring,nonce,elt,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys).

query cr: nonce, gx: elt, log1: bitstring, binder: bitstring, log1': bitstring, 
      sr: nonce, gy: elt, log2: bitstring, log3: bitstring, m: bitstring,
      client_hk: key, server_hk: key, client_hiv: key, server_hiv: key, 
      cfk: key, sfk: key, cs_ats_exp: three_keys;
      event inj:ClientTermDHE(cr,gx,log1,binder,log1',sr,gy,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp) ==>
      	    inj:ServerAcceptDHE(cr,gx,log1,binder,log1',sr,gy,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp).


(* Authentication of the client to the server *)

event ServerTerm(nonce,bitstring,bitstring,bitstring,nonce,bitstring,bitstring,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys,key).
event ClientAccept(nonce,bitstring,bitstring,bitstring,nonce,bitstring,bitstring,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys,key).

query cr: nonce, log1: bitstring, binder: bitstring, log1': bitstring, sr: nonce, log2: bitstring,
      log3: bitstring, m: bitstring, log4: bitstring, cfin: bitstring, client_hk: key, server_hk: key,
      client_hiv: key, server_hiv: key, cfk: key, sfk: key, cs_ats_exp: three_keys,
      res_secret: key;
      event inj:ServerTerm(cr,log1,binder,log1',sr,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,res_secret) ==>
      	    inj:ClientAccept(cr,log1,binder,log1',sr,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,res_secret).

event ServerTermDHE(nonce,elt,bitstring,bitstring,bitstring,nonce,elt,bitstring,bitstring,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys,key).
event ClientAcceptDHE(nonce,elt,bitstring,bitstring,bitstring,nonce,elt,bitstring,bitstring,bitstring,bitstring,bitstring,key,key,key,key,key,key,three_keys,key).

query cr: nonce, gx: elt, log1: bitstring, binder: bitstring, log1': bitstring, sr: nonce, gy: elt, log2: bitstring,
      log3: bitstring, m: bitstring, log4: bitstring, cfin: bitstring, client_hk: key, server_hk: key,
      client_hiv: key, server_hiv: key, cfk: key, sfk: key, cs_ats_exp: three_keys,
      res_secret: key;
      event inj:ServerTermDHE(cr,gx,log1,binder,log1',sr,gy,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,res_secret) ==>
      	    inj:ClientAcceptDHE(cr,gx,log1,binder,log1',sr,gy,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,res_secret).

(* Early authentication *)

event ServerEarlyTerm(nonce,bitstring,bitstring,bitstring,two_keys).
event ClientEarlyAccept(nonce,bitstring,bitstring,bitstring,two_keys).

query cr: nonce, log1: bitstring, binder: bitstring, log1': bitstring, cets_eems: two_keys,
      log1'': bitstring, cets_eems': two_keys;
      event ServerEarlyTerm(cr, log1, binder, log1', cets_eems) ==>
      	    ClientEarlyAccept(cr, log1, binder, log1'', cets_eems').

event ServerEarlyTermDHE(nonce,elt,bitstring,bitstring,bitstring,two_keys).
event ClientEarlyAcceptDHE(nonce,elt,bitstring,bitstring,bitstring,two_keys).

query cr: nonce, gx: elt, log1: bitstring, binder: bitstring, log1': bitstring, cets_eems: two_keys, log1'': bitstring, cets_eems': two_keys;
      event ServerEarlyTermDHE(cr, gx, log1, binder, log1', cets_eems) ==>
      	    ClientEarlyAcceptDHE(cr, gx, log1, binder, log1'', cets_eems').

(* We cannot prove injectivity because of the replay attack.
   We cannot prove that log1' is the same on the client and server sides
   (because it is not included in the MAC).
   As a result, the early keys cets_eems may also be different on the 
   client and server sides. *)

(* Unique channel identifier *)

event ClientTerm1(bitstring, bitstring, bitstring).
event ServerTerm1(bitstring, bitstring, bitstring).

query sfl: bitstring, c_cfl: bitstring, s_cfl: bitstring, c_keys: bitstring, s_keys: bitstring;
      event ClientTerm1(sfl, c_cfl, c_keys) && ServerTerm1(sfl, s_cfl, s_keys) ==>
      c_cfl = s_cfl && c_keys = s_keys.


letfun send_client_hello1() = 
   new cr:nonce;
   cr.

letfun send_client_hello2(earlySecret: extracted, binder_key: key, cr: nonce, log1: bitstring, log1': bitstring) =
   let chbl = ClientHelloBinderLogInfo(cr,log1) in
   let binder = mac(binder_key, chbl) in
   let chl = ClientHelloLogInfo(chbl, binder, log1') in
   let cets_eems = Derive_Secret_cets_eems(earlySecret, chl) in
   (cr, binder, chl, cets_eems).

letfun recv_server_hello(handshakeSecret: extracted, sil:bitstring) = 
  let ServerHelloLogInfo(chl,sr,l2) = sil in
  (let cs_hts = Derive_Secret_cs_hts(handshakeSecret,sil) in
   let client_hts = get_client_hts(cs_hts) in
   let server_hts = get_server_hts(cs_hts) in
   let client_hk = HKDF_expand_key_label(client_hts) in
   let server_hk = HKDF_expand_key_label(server_hts) in
   let client_hiv = HKDF_expand_iv_label(client_hts) in
   let server_hiv = HKDF_expand_iv_label(server_hts) in
   let cfk = HKDF_expand_fin_label(client_hts) in
   let sfk = HKDF_expand_fin_label(server_hts) in
   let masterSecret = HKDF_extract_zero(handshakeSecret) in
   (masterSecret,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,true))
  else (zero_extracted,zero_key,zero_key,zero_key,zero_key,zero_key,zero_key,false).
   

letfun recv_server_finished(sil:bitstring, masterSecret:extracted, sfk: key,
       		            m:bitstring, 
			    log3:bitstring) =
   let scvl = ServerBeforeFinishedLogInfo(sil, log3) in
   let sfl = ServerFinishedLogInfo(scvl,m) in
   let cs_ats_exp = Derive_Secret_cs_ats_exp(masterSecret,sfl) in
   (cs_ats_exp, mac(sfk,scvl) = m).
			   
letfun send_client_finished(log:bitstring, cfk:key) = 
   mac(cfk,log).

letfun get_resumption_secret(masterSecret: extracted, cfl: bitstring) =
   Derive_Secret_rms(masterSecret, cfl).

letfun recv_client_hello(earlySecret: extracted, binder_key: key, cr:nonce, log1: bitstring, binder: bitstring, log1': bitstring) = 
   let chbl = ClientHelloBinderLogInfo(cr,log1) in
   if mac(binder_key, chbl) = binder then
   (
   let chl = ClientHelloLogInfo(chbl, binder, log1') in
   let cets_eems = Derive_Secret_cets_eems(earlySecret, chl) in
   new sr:nonce;
   (sr,chl,cets_eems,true)
   )
   else
   (cr,chbl,zero_two_keys,false).

letfun onertt_hs_keys(sil:bitstring,handshakeSecret:extracted) = 
   let cs_hts = Derive_Secret_cs_hts(handshakeSecret,sil) in
   let client_hts = get_client_hts(cs_hts) in
   let server_hts = get_server_hts(cs_hts) in
   let client_hk = HKDF_expand_key_label(client_hts) in
   let server_hk = HKDF_expand_key_label(server_hts) in
   let client_hiv = HKDF_expand_iv_label(client_hts) in
   let server_hiv = HKDF_expand_iv_label(server_hts) in
   let cfk = HKDF_expand_fin_label(client_hts) in
   let sfk = HKDF_expand_fin_label(server_hts) in
   let masterSecret = HKDF_extract_zero(handshakeSecret) in
   (client_hk, server_hk, client_hiv, server_hiv, cfk, sfk, masterSecret).

letfun send_server_finished(scvl:bitstring,sfk:key) = 
   mac(sfk,scvl).

letfun onertt_data_keys(masterSecret: extracted, sfl:bitstring) = 
   Derive_Secret_cs_ats_exp(masterSecret,sfl).

letfun check_client_finished(masterSecret: extracted, ccvl:bitstring,cfin:bitstring,cfk:key) = 
   if mac(cfk,ccvl) = cfin then
   (
       let cfl = ClientFinishedLogInfo(ccvl, cfin) in
       let resumption_secret = Derive_Secret_rms(masterSecret, cfl) in
       (resumption_secret, true)
   )
   else
       (zero_key, false).

(* Functions modified for the version with DHE *)

letfun send_client_hello1DHE() = 
   new cr:nonce;
   new x:key;
   let gx = exp(G,x) in
   (cr,x,gx).

letfun send_client_hello2DHE(earlySecret: extracted, binder_key: key, cr: nonce, x:key, gx: elt, log1: bitstring, log1': bitstring) = 
   let chbl = ClientHelloBinderLogInfoDHE(cr,gx,log1) in
   let binder = mac(binder_key, chbl) in
   let chl = ClientHelloLogInfo(chbl, binder, log1') in
   let cets_eems = Derive_Secret_cets_eems(earlySecret, chl) in
   (cr,x,gx, binder, chl, cets_eems).

letfun recv_server_helloDHE(earlySecret: extracted, sil:bitstring, x:key) = 
  let ServerHelloLogInfoDHE(chl,sr,gy,l2) = sil in
  (let s = exp(gy,x) in
   let handshakeSecret = HKDF_extract_DHE(earlySecret, s) in
   let cs_hts = Derive_Secret_cs_hts(handshakeSecret,sil) in
   let client_hts = get_client_hts(cs_hts) in
   let server_hts = get_server_hts(cs_hts) in
   let client_hk = HKDF_expand_key_label(client_hts) in
   let server_hk = HKDF_expand_key_label(server_hts) in
   let client_hiv = HKDF_expand_iv_label(client_hts) in
   let server_hiv = HKDF_expand_iv_label(server_hts) in
   let cfk = HKDF_expand_fin_label(client_hts) in
   let sfk = HKDF_expand_fin_label(server_hts) in
   let masterSecret = HKDF_extract_zero(handshakeSecret) in
   (masterSecret,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,true))
  else (zero_extracted,zero_key,zero_key,zero_key,zero_key,zero_key,zero_key,false).

letfun recv_client_helloDHE(earlySecret: extracted, binder_key: key, cr:nonce, gx:elt, log1: bitstring, binder: bitstring, log1': bitstring) = 
   let chbl = ClientHelloBinderLogInfoDHE(cr,gx,log1) in
   if mac(binder_key, chbl) = binder then
   (
   let chl = ClientHelloLogInfo(chbl, binder, log1') in
   let cets_eems = Derive_Secret_cets_eems(earlySecret, chl) in
   new sr:nonce;
   new y: key;
   let gy = exp(G,y) in
   let s = exp(gx,y) in
   let handshakeSecret = HKDF_extract_DHE(earlySecret,s) in   
   (sr,gy,handshakeSecret,chl,cets_eems,true)
   )
   else
   (cr,gx,zero_extracted,chbl,zero_two_keys,false).


param N1,N5,N6,
      N7,N8,N9,N10,N11,N12,
      N13,N14,N15,N16.

(* PSK without DHE *)

let Client = 
!N1
    in(io1,log1: bitstring);
    let cr = send_client_hello1() in
    out(io1', cr);
    (* Give cr to the adversary, so that it can compute binders for
       other PSKs (in log1') and add them to the ClientHello message *) 
    in(io2', log1': bitstring);
    let (cr:nonce,binder: bitstring, chl: bitstring,cets_eems: two_keys) = 
       send_client_hello2(earlySecret, binder_key, cr, log1, log1') in
    event ClientEarlyAccept(cr, log1, binder, log1', cets_eems);
    let cets_eems_c: two_keys = cets_eems in
    out(io2,ClientHelloOut(cr, binder));
    in(io3,ServerHelloIn(sr,log2));
    let sil = ServerHelloLogInfo(chl,sr,log2) in
    let (masterSecret:extracted,client_hk:key,server_hk:key,client_hiv:key,server_hiv:key,cfk:key,sfk:key,=true) = 
       recv_server_hello(handshakeSecret,sil) in
    out(io4,(client_hk, server_hk, client_hiv, server_hiv));
    in(io5,(ServerFinishedIn(log3,m), ClientAuth: bool, log4: bitstring)); 
    let (cs_ats_exp:three_keys,=true) = recv_server_finished(sil,masterSecret,sfk,m,log3) in   
    let scvl = ServerBeforeFinishedLogInfo(sil,log3) in
    let c_sfl : bitstring = ServerFinishedLogInfo(scvl,m) in
    let ccvl = ClientBeforeFinishedLogInfo(c_sfl,log4) in
    let cfin = send_client_finished(ccvl,cfk) in
    let cfl = ClientFinishedLogInfo(ccvl, cfin) in
    let resumption_secret = get_resumption_secret(masterSecret, cfl) in
    event ClientAccept(cr,log1,binder,log1',sr,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret);
    event ClientTerm1((cr,log1,binder,log1',sr,log2,log3,m),(log4,cfin),(client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret));
    out(io6,ClientFinishedOut(cfin));
    in(io7,());
    event ClientTerm(cr,log1,binder,log1',sr,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp);
    (* We prove that cs_ats_exp_c and resumption_secret_c are secret *)
    let cs_ats_exp_c: three_keys = cs_ats_exp in
    let resumption_secret_c : key = resumption_secret in
    out(io8, ()).

let Server = 
 !N6
   in(io9,ClientHelloIn(cr,log1,binder,log1'));
   let (sr:nonce,chl:bitstring,cets_eems: two_keys,=true) = recv_client_hello(earlySecret,binder_key,cr,log1,binder,log1') in
   event ServerEarlyTerm(cr, log1, binder, log1', cets_eems);
   let cets_eems_s: two_keys = cets_eems in
   out(io10,ServerHelloOut(sr));
   in(io11,log2:bitstring);
   let sil = ServerHelloLogInfo(chl,sr,log2) in
   let (client_hk:key, server_hk: key, client_hiv: key, server_hiv: key, cfk: key, sfk: key, masterSecret: extracted) = 
      onertt_hs_keys(sil,handshakeSecret) in
   out(io12,(client_hk, server_hk, client_hiv, server_hiv));
   in(io13,log3:bitstring);
   let scvl = ServerBeforeFinishedLogInfo(sil,log3) in
   let m = send_server_finished(scvl,sfk) in
   let s_sfl = ServerFinishedLogInfo(scvl,m) in
   let cs_ats_exp = onertt_data_keys(masterSecret,s_sfl) in
   event ServerAccept(cr,log1,binder,log1',sr,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp);
   (* We prove that cs_ats_exp_s is secret *)
   let cs_ats_exp_s: three_keys = cs_ats_exp in
   out(io18,ServerFinishedOut(m));
   in(io19,ClientFinishedIn(log4, cfin));
   let ccvl = ClientBeforeFinishedLogInfo(s_sfl,log4) in
   let (resumption_secret: key, =true) = check_client_finished(masterSecret,ccvl,cfin,cfk) in
   event ServerTerm(cr,log1,binder,log1',sr,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret);
   event ServerTerm1((cr,log1,binder,log1',sr,log2,log3,m),(log4,cfin),(client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret));
   (* We prove that resumption_secret_s is secret *)
   let resumption_secret_s : key = resumption_secret in
   out(io30, ()).

(* PSKDHE *)

let ClientDHE = 
!N2
    in(io1,log1: bitstring);
    let (cr: nonce,  x: key, gx: elt) = send_client_hello1DHE() in
    out(io1', (cr,gx));
    (* Give cr,gx to the adversary, so that it can compute binders for
       other PSKs (in log1') and add them to the ClientHello message *) 
    in(io2', log1': bitstring);
    let (cr:nonce,x:key,cgx:elt, binder: bitstring, chl: bitstring, cets_eems: two_keys) = 
       send_client_hello2DHE(earlySecret, binder_key, cr, x, gx, log1, log1') in
    event ClientEarlyAcceptDHE(cr,cgx,log1,binder,log1',cets_eems);
    let cets_eems_cDHE: two_keys = cets_eems in    
    out(io2,ClientHelloOutDHE(cr,cgx,binder));
    in(io3,ServerHelloInDHE(sr,cgy,log2));
    let sil = ServerHelloLogInfoDHE(chl,sr,cgy,log2) in
    let (masterSecret:extracted,client_hk:key,server_hk:key,client_hiv:key,server_hiv:key,cfk:key,sfk:key,=true) = 
       recv_server_helloDHE(earlySecret,sil,x) in
    out(io4,(client_hk, server_hk, client_hiv, server_hiv));
    in(io5,(ServerFinishedIn(log3,m), ClientAuth: bool, log4: bitstring)); 
    let (cs_ats_exp:three_keys,=true) = recv_server_finished(sil,masterSecret,sfk,m,log3) in   
    let scvl = ServerBeforeFinishedLogInfo(sil,log3) in
    let c_sfl : bitstring = ServerFinishedLogInfo(scvl,m) in
    let ccvl = ClientBeforeFinishedLogInfo(c_sfl,log4) in
    let cfin = send_client_finished(ccvl,cfk) in
    let cfl = ClientFinishedLogInfo(ccvl, cfin) in
    let resumption_secret = get_resumption_secret(masterSecret, cfl) in
    event ClientAcceptDHE(cr,cgx,log1,binder,log1',sr,cgy,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret);
    event ClientTerm1((cr,cgx,log1,binder,log1',sr,cgy,log2,log3,m),(log4,cfin),(client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret));
    out(io6,ClientFinishedOut(cfin));
    in(io7,());
    event ClientTermDHE(cr,cgx,log1,binder,log1',sr,cgy,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp);
    (* We prove that cs_ats_exp_cDHE and resumption_secret_cDHE are secret *)
    let cs_ats_exp_cDHE: three_keys = cs_ats_exp in
    let resumption_secret_cDHE: key = resumption_secret in
    out(io8, ()).

let ServerDHE = 
 !N7
   in(io9,ClientHelloInDHE(cr,sgx,log1,binder,log1'));
   let (sr:nonce,sgy:elt,handshakeSecret:extracted, chl: bitstring, cets_eems: two_keys,=true) = recv_client_helloDHE(earlySecret,binder_key,cr,sgx,log1,binder,log1') in
   event ServerEarlyTermDHE(cr,sgx,log1,binder,log1',cets_eems);
   let cets_eems_sDHE: two_keys = cets_eems in
   out(io10,ServerHelloOutDHE(sr,sgy));
   in(io11,log2:bitstring);
   let sil = ServerHelloLogInfoDHE(chl,sr,sgy,log2) in
   let (client_hk:key, server_hk: key, client_hiv: key, server_hiv: key, cfk: key, sfk: key, masterSecret: extracted) = 
      onertt_hs_keys(sil,handshakeSecret) in
   out(io12,(client_hk, server_hk, client_hiv, server_hiv));
   in(io13,log3:bitstring);
   let scvl = ServerBeforeFinishedLogInfo(sil,log3) in
   let m = send_server_finished(scvl,sfk) in
   let s_sfl = ServerFinishedLogInfo(scvl,m) in
   let cs_ats_exp = onertt_data_keys(masterSecret,s_sfl) in
   event ServerAcceptDHE(cr,sgx,log1,binder,log1',sr,sgy,log2,log3,m,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp);
   (* We prove that cs_ats_exp_sDHE is secret *)
   let cs_ats_exp_sDHE: three_keys = cs_ats_exp in
   out(io18,ServerFinishedOut(m));
   in(io19,ClientFinishedIn(log4, cfin));
   let ccvl = ClientBeforeFinishedLogInfo(s_sfl,log4) in
   let (resumption_secret: key, =true) = check_client_finished(masterSecret,ccvl,cfin,cfk) in
   event ServerTermDHE(cr,sgx,log1,binder,log1',sr,sgy,log2,log3,m,log4,cfin,client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret);
   event ServerTerm1((cr,sgx,log1,binder,log1',sr,sgy,log2,log3,m),(log4,cfin),(client_hk,server_hk,client_hiv,server_hiv,cfk,sfk,cs_ats_exp,resumption_secret));
   (* We prove that resumption_secret_sDHE is secret *)
   let resumption_secret_sDHE: key = resumption_secret in
   out(io30, ()).

process 
  in(io20,());
  new hk: hashkey; (* Key that models the choice of the random oracle *)
  new PSK: key;
  let earlySecret = HKDF_extract_zero_salt(hk, PSK) in
  let binder_key = Derive_Secret_psk_binder_key(earlySecret) in
  let handshakeSecret = HKDF_extract_zero1(earlySecret) in
      (* handshake secret for the PSK variant without DHE *)
  out(io21,());
  (Client | Server | ClientDHE | ServerDHE | hashoracle)
