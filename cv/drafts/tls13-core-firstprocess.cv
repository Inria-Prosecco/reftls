channel io.

set interactiveMode = true.

(* 
proof {
      crypto uf_cma(sign) kseed;
      insert 385 "find j' <= N1 suchthat defined(gx_194[j']) && gx_247 = gx_194[j'] then";
      SArename y_252;
      insert 49 "find j <= N6 suchthat defined(y_376[j], gy_253[j], gx_247[j]) && gx_194 = gx_247[j] && gy_197 = gy_253[j] then";
      simplify;
      crypto ddh(exp) x_193 y_376;
      crypto extractor2(HKDF_extract) *;
      crypto prf(HKDF_expand) *;
      crypto extractor1(HKDF_extract) *;
      crypto prf(HKDF_expand) *;
      crypto suf_cma(mac) *;
} 
*)

const empty_bytes:bitstring.

type key [large, fixed].
const zero_key: key.

type elt [large, bounded].
fun element2key(elt): key [compos].
fun elt2bitstring(elt): bitstring [compos].

(* DDH assumption 
   Trying with this assumption. If it does not work,
   we may have to change to GDH + random oracle. *)

proba pDDH.
expand DDH(elt, key, G, exp, mult, pDDH).

letfun dh_keygen() =
   new x:key;
   (x,exp(G,x)).

(* Labels for HKDF_expand *)

type label.
const hk_label:label.
const ss_label:label.
const es_label:label.
const cfin_label:label.
const sfin_label:label.
const ts_label:label.
const dk_label:label.
const dk0_label:label.

type extracted [large, fixed].
(* In fact, the function key2extracted is the identity *)
fun key2extracted(key):extracted [compos]. 

param N, N2, N3, N4.

equiv id(key2extracted)
      !N new k:key; Ok() := key2extracted(k)
  <=(0)=>
      !N new e:extracted; Ok():= e.

(* HKDF_extract is an entropy extractor.
   The first argument is the salt, the second argument
   is the key material *)

fun HKDF_extract(key,key):extracted.

proba Pextract1.

equiv extractor1(HKDF_extract)
       !N3 new r: key; !N Of(x:key) := HKDF_extract(x, r)
     <=(N3 * Pextract1(time + (N3-1)*(N * time(HKDF_extract, maxlength(x))), N, maxlength(x)))=>
       !N3 !N Of(x:key) :=
		find[unique] j<=N suchthat defined(x[j],r2[j]) && x = x[j] then r2[j] 
		else new r2: extracted; r2.

proba Pextract2.

equiv extractor2(HKDF_extract)
       !N3 new r: elt; !N Of(x:key) := HKDF_extract(x, element2key(r))
     <=(N3 * Pextract2(time + (N3-1)*(N * time(HKDF_extract, maxlength(x))), N, maxlength(x)))=>
       !N3 !N Of(x:key) :=
		find[unique] j<=N suchthat defined(x[j],r2[j]) && x = x[j] then r2[j] 
		else new r2: extracted; r2.

(* HKDF_expand is a pseudo random function *)

fun HKDF_expand(extracted,label,bitstring):key.

proba Pprf.

equiv prf(HKDF_expand)
       !N3 new r: extracted; !N Of(x:label, y:bitstring) := HKDF_expand(r, x, y)
     <=(N3 * Pprf(time + (N3-1)*(N * time(HKDF_expand, maxlength(x), maxlength(y))), N, maxlength(x), maxlength(y)))=>
       !N3 !N Of(x:label, y:bitstring) :=
		find[unique] j<=N suchthat defined(x[j],y[j],r2[j]) && x = x[j] && y = y[j] then r2[j] 
		else new r2: key; r2.

(* SUF-CMA MAC *)

define SUF_CMA_mac_nokgen(mkey, macinput, macres, mac, check, Pmac) {

fun mac(mkey, macinput):macres.
fun check(mkey, macinput, macres): bool.

fun mac2(mkey, macinput):macres.

forall m:macinput, k:mkey;
	check(k, m, mac(k, m)).

forall m:macinput, k:mkey, m':macres;
	(mac(k,m) = m') = check(k, m, m').

equiv suf_cma(mac)
      ! N3 new k: mkey;(
	 !N Omac(x: macinput) := mac(k, x),
	 !N2 Ocheck(m: macinput, ma: macres) := check(k, m, ma))
     <=(N3 * Pmac(time + (N3-1)*(N*time(mac,maxlength(x)) + N2*time(check,maxlength(m),maxlength(ma))), N, N2, max(maxlength(x), maxlength(m))))=> [computational]
      ! N3 new k: mkey [unchanged];(
	 !N Omac(x: macinput) := let ma2:macres = mac2(k, x) in ma2,
	 !N2 Ocheck(m: macinput, ma: macres) := 
	    find j <= N suchthat defined(x[j], ma2[j]) && (m = x[j]) && ma = ma2[j] then true else false).

}

proba Pmac.
expand SUF_CMA_mac_nokgen(key, bitstring, bitstring, mac, check, Pmac).

fun enc(key,bitstring): bitstring.
fun dec(key,bitstring): bitstring.
forall k:key, m:bitstring;
    dec(k,enc(k,m)) = m.

type certificate [bounded].
const anon_cert:certificate.

(* UF-CMA signatures
   I suppose that signatures are probabilistic, and
   I generate the public key and private key from a common seed
   (instead of generating the public key from the private key).
   Verify returns true when the verification succeeds 
   (instead of returning the message) *)

define UF_CMA_signature_key_first(keyseed, pkey, skey, signinput, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll) {

const mark: bitstring.

fun sign(skey, signinput, seed): signature.
fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.
fun check(pkey, signinput, signature): bool.

fun sign2(skey, signinput, seed): signature.
fun skgen2(keyseed):skey.
fun pkgen2(keyseed):pkey.
fun check2(pkey, signinput, signature): bool.

forall m:signinput, r:keyseed, r2:seed; 
	check(pkgen(r), m, sign(skgen(r), m, r2)) = true.
forall m:signinput, r:keyseed, r2:seed; 
	check2(pkgen2(r), m, sign2(skgen2(r), m, r2)) = true.

equiv uf_cma(sign)
       !N3 new r: keyseed; (Opk() [2] := pkgen(r),
			    !N2 new r2: seed; Osign(x: signinput) := sign(skgen(r), x, r2),
			    !N Ocheck(m1: signinput, si1:signature) := check(pkgen(r), m1, si1)),
       !N4 Ocheck2(m: signinput, y: pkey, si: signature) [3] := check(y, m, si) [all]
     <=(N3 * Psign(time + (N4+N-1) * time(check, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(sign, maxlength(x)) + N * time(check, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [computational]
       !N3 new r: keyseed [unchanged]; 
       	       	  	   (Opk() := pkgen2(r),
			    !N2 new r2: seed [unchanged]; Osign(x: signinput) := sign2(skgen2(r), x, r2),
			    !N Ocheck(m1: signinput, si1:signature) :=
                              find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(pkgen2(r), m1, si1) then true else false),
       !N4 Ocheck2(m: signinput, y: pkey, si: signature) :=
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(y, m, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then false else
		check(y,m,si).

equiv uf_cma_corrupt(sign)
       !N3 new r: keyseed; (Opk() [useful_change] [2] := pkgen(r),
			    !N2 new r2: seed; Osign(x: signinput) [useful_change] := sign(skgen(r), x, r2),
			    !N Ocheck(m1: signinput, si1:signature) [useful_change] := check(pkgen(r), m1, si1),
			    Ocorrupt() [10] := r),
       !N4 Ocheck2(m: signinput, y: pkey, si: signature) [3] := check(y, m, si) [all]
     <=(N3 * Psign(time + (N4+N-1) * time(check, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(sign, maxlength(x)) + N * time(check, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [manual,computational]
       !N3 new r: keyseed [unchanged]; 
       	       	  	   (Opk() := pkgen2(r),
			    !N2 new r2: seed [unchanged]; Osign(x: signinput) := sign2(skgen2(r), x, r2),
			    !N Ocheck(m1: signinput, si1:signature) :=
			      if defined(corrupt) then check2(pkgen2(r), m1, si1) else
                              find j <= N2 suchthat defined(x[j]) && m1 = x[j] && check2(pkgen2(r), m1, si1) then true else false,
			    Ocorrupt() := let corrupt: bitstring = mark in r),
       !N4 Ocheck2(m: signinput, y: pkey, si: signature) :=
		find k <= N3 suchthat defined(r[k],corrupt[k]) && y = pkgen2(r[k]) then check2(y, m, si) else
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = pkgen2(r[k]) && m = x[j,k] && check2(y, m, si) then true else
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then false else
		check(y,m,si).

collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen(r2) <=(Psigncoll)=> false.
collision new r1:keyseed; new r2:keyseed; 
	pkgen(r1) = pkgen2(r2) <=(Psigncoll)=> false.
collision new r1:keyseed; new r2:keyseed; 
	pkgen2(r1) = pkgen2(r2) <=(Psigncoll)=> false.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen(r2) <=(Psigncoll)=> false.
collision new r1:keyseed; new r2:keyseed; 
	skgen(r1) = skgen2(r2) <=(Psigncoll)=> false.
collision new r1:keyseed; new r2:keyseed; 
	skgen2(r1) = skgen2(r2) <=(Psigncoll)=> false.

}

type keyseed [large, bounded].
type seed [large, bounded].
type skey [bounded].
proba Psign.
proba Psigncoll.
expand UF_CMA_signature_key_first(keyseed, certificate, skey, bitstring, bitstring, seed, 
       		        skgen, pkcert, sign, verify, Psign, Psigncoll).

type nonce [large, fixed].

(* Message formats *)

fun ClientHello(nonce, elt): bitstring [compos].
fun ServerHelloIn(nonce, elt, bitstring): bitstring [compos].
fun ServerHelloOut(nonce, elt): bitstring [compos].
fun ServerCertificateIn(certificate,bitstring): bitstring [compos].
fun ServerFinishedIn(certificate,bitstring,bitstring,bitstring,bitstring,bitstring): bitstring [compos].
fun ServerCertificateVerifyOut(bitstring): bitstring [compos].
fun ServerFinishedOut(bitstring): bitstring [compos].

fun ClientCertificateVerifyOut(bitstring): bitstring [compos].
fun ClientFinishedOut(bitstring): bitstring  [compos].
fun ClientFinishedIn(bitstring,bitstring): bitstring  [compos].
fun ClientFinishedAuthIn(certificate,bitstring,bitstring,bitstring,bitstring): bitstring  [compos].

(* Logs *)

type serverHelloLogInfo.
fun ServerHelloLogInfo(nonce,elt,nonce,elt): serverHelloLogInfo [compos].
fun getServerHelloLogInfo(bitstring): serverHelloLogInfo.

type serverCertificateLogInfo.
fun ServerCertificateLogInfo(serverHelloLogInfo,certificate): serverCertificateLogInfo [compos].
fun getServerCertificateLogInfo(bitstring): serverCertificateLogInfo.

type serverCertificateVerifyLogInfo.
fun ServerCertificateVerifyLogInfo(serverCertificateLogInfo,bitstring): serverCertificateVerifyLogInfo [compos].
fun getServerCertificateVerifyLogInfo(bitstring): serverCertificateVerifyLogInfo.

type serverFinishedLogInfo.
fun ServerFinishedLogInfo(serverCertificateVerifyLogInfo,bitstring): serverFinishedLogInfo [compos].
fun getServerFinishedLogInfo(bitstring): serverFinishedLogInfo.

type clientCertificateLogInfo.
fun ClientCertificateLogInfo(serverFinishedLogInfo,certificate): clientCertificateLogInfo [compos].
fun getClientCertificateLogInfo(bitstring): clientCertificateLogInfo.

type clientCertificateVerifyLogInfo.
fun ClientCertificateVerifyLogInfo(clientCertificateLogInfo,bitstring): clientCertificateVerifyLogInfo [compos].
fun getClientCertificateVerifyLogInfo(bitstring): clientCertificateVerifyLogInfo.

table serverLongTermKeys(certificate,skey,elt,key).
table clientLongTermKeys(certificate,skey).
table clientCache(elt,certificate).

table oneRTTClientDataKey(nonce,nonce,certificate,certificate,key).
table oneRTTServerDataKey(nonce,nonce,certificate,certificate,key).
table oneRTTServerFalseStartKey(nonce,nonce,certificate,key,key,bitstring).
table zeroRTTClientKey(nonce,certificate,certificate,key,key).
table zeroRTTServerKey(nonce,certificate,certificate,key,key).


event SendClient(nonce,nonce,certificate,certificate,bitstring).
event RecvServer(nonce,nonce,certificate,certificate,bitstring).
event SendServer(nonce,nonce,certificate,certificate,bitstring).
event RecvClient(nonce,nonce,certificate,certificate,bitstring).

event SendClient0(nonce,certificate,certificate,key,bitstring).
event RecvServer0(nonce,certificate,certificate,key,bitstring).
event SendServer0(nonce,nonce,certificate,bitstring).
event RecvClient0(nonce,nonce,certificate,bitstring).


(* Secrecy properties *)

query secret dk_secret.

const secret_msg0:bitstring.
const secret_msg1:bitstring.
const secret_msg2:bitstring.
const secret_msg3:bitstring.

letfun send_client_hello() = 
       new cr:nonce;
       new x:key;
       let gx = exp(G,x) in
       (cr,x,gx).


letfun recv_server_hello(sil:serverHelloLogInfo, x:key, l:bitstring) = 
  let ServerHelloLogInfo(cr,gx,sr,gy) = sil in
  (let s = element2key(exp(gy,x)) in
   let xES = HKDF_extract(zero_key,s) in
   let hk =  HKDF_expand(xES,hk_label,l) in    
   if getServerHelloLogInfo(l) = ServerHelloLogInfo(cr,gx,sr,gy) 
   then (xES,hk,true)
   else (xES,hk,false))
  else (key2extracted(zero_key),zero_key,false).
   

letfun recv_server_finished(si:serverHelloLogInfo, xES:extracted, xSS:extracted,
       		            cert:certificate, s:bitstring, m:bitstring, 
			    log1:bitstring, log2:bitstring, log3:bitstring) =
   let mES = HKDF_expand(xES,es_label,log2) in
   let mSS = HKDF_expand(xSS,ss_label,log2) in
   let ms = HKDF_extract(mSS,mES) in
   let cfk = HKDF_expand(ms,cfin_label,empty_bytes) in
   let sfk = HKDF_expand(ms,sfin_label,empty_bytes) in
   let ts0 = HKDF_expand(ms,ts_label,log2) in
   let dk = HKDF_expand(key2extracted(ts0),dk_label,log3) in
   let scl = ServerCertificateLogInfo(si,cert) in
   let scvl = ServerCertificateVerifyLogInfo(scl,s) in
   let sfl = ServerFinishedLogInfo(scvl,m) in
   if (verify(cert,log1,s) &&
       mac(sfk,log2) = m &&
       getServerCertificateLogInfo(log1) = scl &&
       getServerCertificateVerifyLogInfo(log2) = scvl &&
       getServerFinishedLogInfo(log3) = sfl) then
       (dk,cfk,true)
   else (dk,cfk,false).
			   
letfun send_client_finished_no_auth(sfl:serverFinishedLogInfo, cfk:key, log3: bitstring) = 
   let cfin = mac(cfk,log3) in			    
   if getServerFinishedLogInfo(log3) = sfl then
        (cfin,true)
   else (cfin,false).

letfun send_client_certificate_verify(ccl:clientCertificateLogInfo, sk:skey, log:bitstring) = 
   new s: seed;
   let sg = sign(sk,log,s) in
   if getClientCertificateLogInfo(log) = ccl then
        (sg,true)
   else (sg,false).

letfun send_client_finished_client_auth(ccvl:clientCertificateVerifyLogInfo, cfk:key, log3: bitstring) = 
   let cfin = mac(cfk,log3) in			    
   if getClientCertificateVerifyLogInfo(log3) = ccvl then
        (cfin,true)
   else (cfin,false).

letfun recv_client_hello(cr:nonce, gx:elt) = 
   new sr:nonce;
   new y: key;
   let gy = exp(G,y) in
   let s = element2key(exp(gx,y)) in
   let xES = HKDF_extract(zero_key,s) in
   (sr,gy,xES).

letfun onertt_hs_keys(sil:serverHelloLogInfo,xES:extracted,log:bitstring) = 
   let hk = HKDF_expand(xES,hk_label,log) in    
   if getServerHelloLogInfo(log) = sil then
      (hk,true)
   else (hk,false).

letfun send_server_certificate_verify(scl:serverCertificateLogInfo,sk:skey,log:bitstring) = 
   new s: seed;
   let sg = sign(sk,log,s) in
   if getServerCertificateLogInfo(log) = scl then
      (sg,true)
   else (sg,false).

letfun send_server_finished(scvl:serverCertificateVerifyLogInfo,xES:extracted,xSS:extracted,log:bitstring) = 
   let mES = HKDF_expand(xES,es_label,log) in
   let mSS = HKDF_expand(xSS,ss_label,log) in
   let ms = HKDF_extract(mSS,mES) in
   let cfk = HKDF_expand(ms,cfin_label,empty_bytes) in
   let sfk = HKDF_expand(ms,sfin_label,empty_bytes) in
   let ts0 = HKDF_expand(ms,ts_label,log) in
   let m = mac(sfk,log) in
   if getServerCertificateVerifyLogInfo(log) = scvl then
      (cfk,ts0,m,true)
   else (cfk,ts0,m,false).

letfun onertt_data_keys(sfl:serverFinishedLogInfo,ts0:key,log:bitstring) = 
   let dk = HKDF_expand(key2extracted(ts0),dk_label,log) in
   if getServerFinishedLogInfo(log) = sfl then
      (dk,true)
   else (dk,false).

letfun check_client_finished_no_auth(sfl:serverFinishedLogInfo,cfin:bitstring,cfk:key,log:bitstring) = 
   if (mac(cfk,log) = cfin && 
       getServerFinishedLogInfo(log) = sfl) then
      true
   else false.

letfun check_client_finished_client_auth(sfl:serverFinishedLogInfo, 
				    certC:certificate,
				    cv:bitstring,cfin:bitstring,
			    	    cfk:key,log1:bitstring,log2:bitstring) = 
   let ccl = ClientCertificateLogInfo(sfl,certC) in
   let ccvl = ClientCertificateVerifyLogInfo(ccl,cv) in
   if (getClientCertificateLogInfo(log1) = ccl &&
       verify(certC,log1,cv) &&
       getClientCertificateVerifyLogInfo(log2) = ccvl &&
       mac(cfk,log2) = cfin) then
      true
   else false.

param N1,N5,N6,
      N7,N8,N9,N10,N11,N12,
      N13,N14,N15,N16.

let Client = 
!N1
    (in(io,());
    let (cr:nonce,x:key,gx:elt) = send_client_hello() in
    (* for 0-rtt  insert clientEphemeralKeys(cr,x,gx); *)
    out(io,ClientHello(cr,gx));
    in(io,ServerHelloIn(sr,gy,l));
    let sil = ServerHelloLogInfo(cr,gx,sr,gy) in
    let (xES:extracted,hk:key,=true) = recv_server_hello(sil,x,l) in
    out(io,hk);
    in(io,ServerFinishedIn(cert,s,m,log1,log2,log3:bitstring)); 
    let (dk:key,cfk:key,=true) = recv_server_finished(sil,xES,xES,cert,s,m,log1,log2,log3) in   
    let scl = ServerCertificateLogInfo(sil,cert) in
    let scvl = ServerCertificateVerifyLogInfo(scl,s) in
    let sfl = ServerFinishedLogInfo(scvl,m) in
    let (cfin:bitstring,=true) = send_client_finished_no_auth(sfl,cfk,log3) in
    insert oneRTTClientDataKey(cr,sr,anon_cert,cert,dk);
    out(io,ClientFinishedOut(cfin));
    in(io,());
    if cert = pkS then
    (* The client is talking to the honest server.
       Check that the shared key is secret. *)
    let dk_secret: key = dk)
(*|
!N2
   (in(io,());
    let (cr:nonce,x:key,gx:elt) = send_client_hello() in
    out(io,ClientHello(cr,gx));
    in(io,ServerHelloIn(sr,gy,l));
    let sil = ServerHelloLogInfo(cr,gx,sr,gy) in
    let (xES:extracted,hk:key,=true) = recv_server_hello(sil,x,l) in
    out(io,());
    in(io,ServerFinishedIn(cert,s,m,log1,log2,log3)); 
    let (dk:key,cfk:key,=true) = recv_server_finished(sil,xES,xES,cert,s,m,log1,log2,log3) in   
    out(io,());
    in(io,ServerCertificateIn(certC,log4));
    get clientLongTermKeys(=certC,sk) in
    let scl = ServerCertificateLogInfo(sil,cert) in
    let scvl = ServerCertificateVerifyLogInfo(scl,s) in
    let sfl = ServerFinishedLogInfo(scvl,m) in
    let ccl = ClientCertificateLogInfo(sfl,certC) in
    let (sg:bitstring,=true) = send_client_certificate_verify(ccl,sk,log4) in
    out(io,ClientCertificateVerifyOut(sg));
    in(io,log5:bitstring);
    let ccvl = ClientCertificateVerifyLogInfo(ccl,sg) in
    let (cfin:bitstring,=true) = send_client_finished_client_auth(ccvl,cfk,log5) in
    insert oneRTTClientDataKey(cr,sr,certC,cert,dk);
    out(io,ClientFinishedOut(cfin)))
|
!N3
  (in(io,e:bitstring);
   get oneRTTClientDataKey(cr,sr,certC,certS,k) in
   let m = dec(k,e) in
   event RecvClient(cr,sr,certC,certS,m))
| 
!N4
  (in(io,m:bitstring);
   get oneRTTClientDataKey(cr,sr,certC,certS,k) in
   event SendClient(cr,sr,certC,certS,m);
   out(io,enc(k,m)))
  | 
  !N5
  (in(io,());
   get oneRTTClientDataKey(cr,sr,certC,certS,k) in
   event SendClient(cr,sr,certC,certS,secret_msg2);
    out(io,enc(k,secret_msg2)))
*)
.


let Server = 
 !N6
  (in(io,ClientHello(cr,gx));
   let (sr:nonce,gy:elt,xES:extracted) = recv_client_hello(cr,gx) in
   out(io,ServerHelloOut(sr,gy));
   in(io,log:bitstring);
   let sil = ServerHelloLogInfo(cr,gx,sr,gy) in
   let (hk:key,=true) = onertt_hs_keys(sil,xES,log) in
   out(io,hk);
   in(io,(cert:certificate,log1:bitstring));
   get serverLongTermKeys(=cert,sk,gss,ss) in
   let scl = ServerCertificateLogInfo(sil,cert) in
   let (sg:bitstring,=true) = send_server_certificate_verify(scl,sk,log1) in
   out(io,ServerCertificateVerifyOut(sg));
   in(io,log2:bitstring);
   let scvl = ServerCertificateVerifyLogInfo(scl,sg) in
   let (cfk:key,ts0:key,m:bitstring,=true) = send_server_finished(scvl,xES,xES,log2) in
   out(io,ServerFinishedOut(m));
   in(io,log3:bitstring);
   let sfl = ServerFinishedLogInfo(scvl,m) in
   let (dk:key,=true) = onertt_data_keys(sfl,ts0,log3) in
   insert oneRTTServerFalseStartKey(cr,sr,cert,dk,cfk,empty_bytes);
   out(io,());
   in(io,ClientFinishedIn(cfin:bitstring,log4:bitstring));
   if (check_client_finished_no_auth(sfl,cfin,cfk,log4)) then
   insert oneRTTServerDataKey(cr,sr,anon_cert,cert,dk))
(*|
 !N7
   (in(io,ClientHello(cr,gx));
   let (sr:nonce,gy:elt,xES:extracted) = recv_client_hello(cr,gx) in
   out(io,ServerHelloOut(sr,gy));
   in(io,log:bitstring);
   let sil = ServerHelloLogInfo(cr,gx,sr,gy) in
   let (hk:key,=true) = onertt_hs_keys(sil,xES,log) in
   out(io,hk);
   in(io,(cert:certificate,log1:bitstring));
   get serverLongTermKeys(=cert,sk,gss,ss) in
   let scl = ServerCertificateLogInfo(sil,cert) in
   let (sg:bitstring,=true) = send_server_certificate_verify(scl,sk,log1) in
   out(io,ServerCertificateVerifyOut(sg));
   in(io,log2:bitstring);
   let scvl = ServerCertificateVerifyLogInfo(scl,sg) in
   let (cfk:key,ts0:key,m:bitstring,=true) = send_server_finished(scvl,xES,xES,log2) in
   out(io,ServerFinishedOut(m));
   in(io,log3:bitstring);
   let sfl = ServerFinishedLogInfo(scvl,m) in
   let (dk:key,=true) = onertt_data_keys(sfl,ts0,log3) in
   insert oneRTTServerFalseStartKey(cr,sr,cert,dk,cfk,empty_bytes);
   out(io,());
   in(io,ClientFinishedAuthIn(certC,cv,cfin,log4,log5));
   let ccl = ClientCertificateLogInfo(sfl,certC) in
   if (check_client_finished_client_auth(sfl,certC,cv,cfin,cfk,log4,log5)) then
   insert oneRTTServerDataKey(cr,sr,certC,cert,dk))
 | 
  !N8 (in(io,e:bitstring);
   get oneRTTServerDataKey(cr,sr,certC,cert,k) in
   let m = dec(k,e) in
   event RecvServer(cr,sr,certC,cert,m))
  | 
  !N9 (in(io,m:bitstring);
   get oneRTTServerFalseStartKey(cr,sr,cert,k,cfk,log) in
   event SendServer0(cr,sr,cert,m);
   out(io,enc(k,m)))
  | 
  !N10 
(in(io,m:bitstring);
   get oneRTTServerFalseStartKey(cr,sr,cert,k,cfk,log) in
   event SendServer0(cr,sr,cert,secret_msg1);
    out(io,enc(k,secret_msg1)))
|
  !N11 (in(io,m:bitstring);
   get oneRTTServerDataKey(cr,sr,certC,cert,k) in
   event SendServer(cr,sr,certC,cert,m);
   out(io,enc(k,m)))
|
  !N12 (in(io,m:bitstring);
   get oneRTTServerDataKey(cr,sr,certC,cert,k) in
   event SendServer(cr,sr,certC,cert,secret_msg3);
   out(io,enc(k,secret_msg3)))
*).

(*
let Server0() = 
 !(in(io,(ClientHello(cr,gx)));
   new sr:nonce;
   let (y:key,gy:key) = dh_keygen() in
   get serverLongTermKeys(cert,sk,gss,ss) in
   let ss = expH_P256(x,gs) in
   let xSS = HKDF_extract(zero_key,ss) in
   let dk0 = HKDF_expand(xSS,dk0_label,log) in
   insert zeroRTTServerKey(cr,anon_cert,certS,gs,dk0);
   let shlog = (ClientHello(cr,gy),ServerHello(sr,gy)) in
   let s = DH_P256(y,gx) in
   let xES = HKDF_extract(zero_key,s) in
   let hk =  HKDF_expand(xES,hk_label,shlog) in    
   insert oneRTTServerHSKey(cr,sr,xES,xSS,hk,certS,shlog);
   out(io,(ServerHello(sr,gy)))
  )
 .
 *)

process 
  in(io,());
  new kseed:keyseed;
  let skS = skgen(kseed) in
  let pkS = pkcert(kseed) in
  let (s:key,gs:elt) = dh_keygen() in
  insert serverLongTermKeys(pkS,skS,gs,s);
  out(io,(pkS,gs));
(Client | Server
  |
(!N13 in(io, (pkx: certificate, skx: skey, gsx: elt, sx: key));
  if pkx <> pkS then
  insert serverLongTermKeys(pkx,skx,gsx,sx))
  |
(* !N14 (in(io,());
  new kseed:keyseed;
  let sk = skgen(kseed) in
  let pk = pkcert(kseed) in
  insert clientLongTermKeys(pk,sk);
  out(io,pk))
 |*)
 (!N15 in(io,(cert:certificate));
   get serverLongTermKeys(=cert,sk,gs,s) in
   new s: seed;
   out(io,sign(sk,elt2bitstring(gs), s)))
(*  |
 (!N16 in(io,(gs:elt,cert:certificate,sg:bitstring));
   let kb = elt2bitstring(gs) in
   if verify(cert,kb,sg) then
   insert clientCache(gs,cert))*)
)
